/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicLayoutRouteImport } from './routes/_public/layout'
import { Route as ProtectedLayoutRouteImport } from './routes/_protected/layout'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PublicRegisterRouteImport } from './routes/_public/register'
import { Route as PublicLoginRouteImport } from './routes/_public/login'
import { Route as ProtectedPostsIndexRouteImport } from './routes/_protected/posts/index'
import { Route as ProtectedPostsPostidIndexRouteImport } from './routes/_protected/posts/$postid/index'

const PublicLayoutRoute = PublicLayoutRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedLayoutRoute = ProtectedLayoutRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicRegisterRoute = PublicRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => PublicLayoutRoute,
} as any)
const PublicLoginRoute = PublicLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicLayoutRoute,
} as any)
const ProtectedPostsIndexRoute = ProtectedPostsIndexRouteImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => ProtectedLayoutRoute,
} as any)
const ProtectedPostsPostidIndexRoute =
  ProtectedPostsPostidIndexRouteImport.update({
    id: '/posts/$postid/',
    path: '/posts/$postid/',
    getParentRoute: () => ProtectedLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof PublicLoginRoute
  '/register': typeof PublicRegisterRoute
  '/posts': typeof ProtectedPostsIndexRoute
  '/posts/$postid': typeof ProtectedPostsPostidIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof PublicLoginRoute
  '/register': typeof PublicRegisterRoute
  '/posts': typeof ProtectedPostsIndexRoute
  '/posts/$postid': typeof ProtectedPostsPostidIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedLayoutRouteWithChildren
  '/_public': typeof PublicLayoutRouteWithChildren
  '/_public/login': typeof PublicLoginRoute
  '/_public/register': typeof PublicRegisterRoute
  '/_protected/posts/': typeof ProtectedPostsIndexRoute
  '/_protected/posts/$postid/': typeof ProtectedPostsPostidIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/register' | '/posts' | '/posts/$postid'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/register' | '/posts' | '/posts/$postid'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/_public'
    | '/_public/login'
    | '/_public/register'
    | '/_protected/posts/'
    | '/_protected/posts/$postid/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedLayoutRoute: typeof ProtectedLayoutRouteWithChildren
  PublicLayoutRoute: typeof PublicLayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/register': {
      id: '/_public/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof PublicRegisterRouteImport
      parentRoute: typeof PublicLayoutRoute
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginRouteImport
      parentRoute: typeof PublicLayoutRoute
    }
    '/_protected/posts/': {
      id: '/_protected/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof ProtectedPostsIndexRouteImport
      parentRoute: typeof ProtectedLayoutRoute
    }
    '/_protected/posts/$postid/': {
      id: '/_protected/posts/$postid/'
      path: '/posts/$postid'
      fullPath: '/posts/$postid'
      preLoaderRoute: typeof ProtectedPostsPostidIndexRouteImport
      parentRoute: typeof ProtectedLayoutRoute
    }
  }
}

interface ProtectedLayoutRouteChildren {
  ProtectedPostsIndexRoute: typeof ProtectedPostsIndexRoute
  ProtectedPostsPostidIndexRoute: typeof ProtectedPostsPostidIndexRoute
}

const ProtectedLayoutRouteChildren: ProtectedLayoutRouteChildren = {
  ProtectedPostsIndexRoute: ProtectedPostsIndexRoute,
  ProtectedPostsPostidIndexRoute: ProtectedPostsPostidIndexRoute,
}

const ProtectedLayoutRouteWithChildren = ProtectedLayoutRoute._addFileChildren(
  ProtectedLayoutRouteChildren,
)

interface PublicLayoutRouteChildren {
  PublicLoginRoute: typeof PublicLoginRoute
  PublicRegisterRoute: typeof PublicRegisterRoute
}

const PublicLayoutRouteChildren: PublicLayoutRouteChildren = {
  PublicLoginRoute: PublicLoginRoute,
  PublicRegisterRoute: PublicRegisterRoute,
}

const PublicLayoutRouteWithChildren = PublicLayoutRoute._addFileChildren(
  PublicLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedLayoutRoute: ProtectedLayoutRouteWithChildren,
  PublicLayoutRoute: PublicLayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
